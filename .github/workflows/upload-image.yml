name: Upload Docker Image to GitHub Container Registry
run-name: Upload Docker Image to GitHub Container Registry

on:
  workflow_call:
    inputs:
      app_name:
        description: 'Name of the application'
        required: true
        type: string
      public_port:
        description: 'Public port to reach apps router'
        required: true
        type: string
      package_name:
        description: 'Name of the package (frontend/backend)'
        required: true
        type: string
    outputs:
      image_name:
        description: 'Name of the uploaded image'
        value: ${{ jobs.upload-image.outputs.image_name }}

permissions:
  contents: read
  packages: write

env:
  IMAGE_NAME: ghcr.io/${{ github.repository }}/${{ inputs.package_name }}

jobs:
  upload-image:
    runs-on: ubuntu-latest
    outputs:
      image_name: ${{ steps.set-output.outputs.image_name }}
    steps:
      - name: Setup Docker Buildx and Cache
        uses: ./.github/actions/setup-docker-cache
        with:
          app_name: ${{ inputs.app_name }}

      - name: Output image name
        id: set-output
        run: echo "image_name=${{ env.IMAGE_NAME }}" >> $GITHUB_OUTPUT

      - name: Checkout code
        uses: actions/checkout@v5

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build Docker image
        run: |
          # Build and push image if directory exists
          if [ -d "./packages/${{ inputs.package_name }}" ]; then
            echo "Building ${{ inputs.package_name }} image..."
            docker build \
              -t ${{ env.IMAGE_NAME }}:${{ github.sha }} \
              -t ${{ env.IMAGE_NAME }}:latest \
              -f ./packages/frontend/Dockerfile \
              --build-arg APP_NAME=${{ inputs.app_name }} .
          fi

      - name: Push Docker image to GitHub Container Registry
        run: |
          # Check if the image was built
          if docker images -q ${{ env.IMAGE_NAME }}:${{ github.sha }}; then
            echo "Pushing ${{ inputs.package_name }} image to GitHub Container Registry..."
            docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
            docker push ${{ env.IMAGE_NAME }}:latest
          else
            echo "Error: Image ${{ env.IMAGE_NAME }}:${{ github.sha }} does not exist. Skipping push." >&2
            exit 1
          fi